<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dimension.dao.TableFieldMapper">

    <resultMap id="mapResultMap" type="HashMap" >
        <result property="key" column="tableId" jdbcType="INTEGER" javaType="INTEGER"/>
        <result property="value" column="count" javaType="INTEGER" jdbcType="INTEGER"/>
    </resultMap>
    <update id="createTable" statementType="STATEMENT">
        CREATE TABLE ${tableName} (
        nodeId bigint(20) UNSIGNED NULL DEFAULT NULL ,
        <foreach collection="fields" item="field" separator="," close=",">
            ${field.englishname} ${field.fieldtype} DEFAULT NULL
        </foreach>
        INDEX `nodeId` (`nodeId`) USING BTREE
        )
        ENGINE=InnoDB
        DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci
    </update>
    <delete id="deleteById">
		delete from ${tableName}
		where nodeId = #{nodeId}
	</delete>
    <select id="getFieldVariable" resultType="String" >
        select ${tableField} from ${tableName}
        <where>
            <if test="nodeId != null">
                nodeId = #{nodeId}
            </if>
        </where>
    </select>
    <update id="setFieldVariable">
        update ${tableName}
        SET
        <foreach item="value" index="key" collection="var" separator=",">
            <if test="key != 'nodeid'">
                ${key} = #{value}
            </if>
        </foreach>
        WHERE
        <foreach item="value" index="key" collection="var" separator=",">
            <if test="key == 'nodeid'">
                nodeId = #{value}
            </if>
        </foreach>
    </update>
    <update id="dropTable">
		DROP TABLE IF EXISTS ${tableName};
	</update>
    <insert id="insertRecord">
        insert into ${tableName}
        <foreach item="value" index="key" collection="var" separator="," open="(" close=")">
            ${key}
        </foreach>
        values
        <foreach item="value" index="key" collection="var" separator="," open="(" close=")">
            #{value}
        </foreach>
    </insert>

    <update id="addField">
	ALTER TABLE ${tableName} ADD ${field} ${type};
	</update>
    <update id="alterField">
	ALTER TABLE ${tableName} CHANGE ${origin} ${dest} ${type};
	</update>
    <update id="dropField">
	ALTER TABLE ${tableName} DROP  ${field} ;
	</update>
    <select id="count" resultMap="mapResultMap" >
	SELECT tableId,count(*) as "count" from base_node
GROUP BY base_node.tableId
	</select>


</mapper>